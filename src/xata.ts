// Generated by Xata Codegen 0.29.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "contacts",
    columns: [
      { name: "name", type: "string" },
      { name: "relationship", type: "string" },
      { name: "email", type: "email" },
      { name: "phone_number", type: "string" },
      { name: "resident", type: "link", link: { table: "residents" } },
      { name: "location", type: "link", link: { table: "locations" } },
      { name: "organization", type: "link", link: { table: "organizations" } },
    ],
    revLinks: [{ column: "emergency_contact", table: "residents" }],
  },
  {
    name: "residents",
    columns: [
      { name: "name", type: "string" },
      { name: "date_of_birth", type: "datetime" },
      { name: "room_number", type: "string" },
      { name: "status", type: "string" },
      { name: "health_information", type: "multiple" },
      { name: "emergency_contact", type: "link", link: { table: "contacts" } },
      { name: "location", type: "link", link: { table: "locations" } },
      { name: "organization", type: "link", link: { table: "organizations" } },
    ],
    revLinks: [
      { column: "resident", table: "payments" },
      { column: "resident", table: "contacts" },
    ],
  },
  {
    name: "locations",
    columns: [
      { name: "name", type: "string" },
      { name: "address", type: "string" },
      { name: "city", type: "string" },
      { name: "state", type: "string" },
      { name: "country", type: "string" },
      { name: "phone_number", type: "string" },
      { name: "capacity", type: "string" },
      { name: "organization", type: "link", link: { table: "organizations" } },
    ],
    revLinks: [
      { column: "location", table: "residents" },
      { column: "location", table: "payments" },
      { column: "location", table: "contacts" },
      { column: "location", table: "staff" },
    ],
  },
  {
    name: "staff",
    columns: [
      { name: "name", type: "string" },
      { name: "role", type: "string" },
      { name: "phone_number", type: "string" },
      { name: "email", type: "email" },
      { name: "status", type: "string" },
      { name: "qualifications", type: "multiple" },
      { name: "job_title", type: "string" },
      { name: "location", type: "link", link: { table: "locations" } },
      { name: "organization", type: "link", link: { table: "organizations" } },
      { name: "user", type: "link", link: { table: "users" } },
    ],
  },
  {
    name: "organizations",
    columns: [
      { name: "name", type: "string" },
      { name: "primary_admin_name", type: "string" },
      { name: "primary_admin_email", type: "string" },
    ],
    revLinks: [
      { column: "organization", table: "payments" },
      { column: "organization", table: "contacts" },
      { column: "organization", table: "locations" },
      { column: "organization", table: "residents" },
      { column: "organization", table: "staff" },
      { column: "organization", table: "folders" },
      { column: "organization", table: "users" },
      { column: "organization", table: "invited" },
    ],
  },
  {
    name: "payments",
    columns: [
      { name: "amount", type: "float" },
      { name: "status", type: "string" },
      { name: "organization", type: "link", link: { table: "organizations" } },
      { name: "resident", type: "link", link: { table: "residents" } },
      { name: "location", type: "link", link: { table: "locations" } },
      { name: "due_date", type: "datetime" },
      { name: "transaction_date", type: "datetime" },
    ],
  },
  {
    name: "folders",
    columns: [
      { name: "user_id", type: "string" },
      { name: "name", type: "string" },
      { name: "organization", type: "link", link: { table: "organizations" } },
    ],
  },
  {
    name: "users",
    columns: [
      { name: "user_id", type: "string" },
      { name: "organization", type: "link", link: { table: "organizations" } },
      { name: "role", type: "string" },
    ],
    revLinks: [{ column: "user", table: "staff" }],
  },
  {
    name: "invited",
    columns: [
      { name: "email", type: "string" },
      { name: "name", type: "string" },
      { name: "role", type: "string" },
      { name: "organization", type: "link", link: { table: "organizations" } },
      { name: "status", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Contacts = InferredTypes["contacts"];
export type ContactsRecord = Contacts & XataRecord;

export type Residents = InferredTypes["residents"];
export type ResidentsRecord = Residents & XataRecord;

export type Locations = InferredTypes["locations"];
export type LocationsRecord = Locations & XataRecord;

export type Staff = InferredTypes["staff"];
export type StaffRecord = Staff & XataRecord;

export type Organizations = InferredTypes["organizations"];
export type OrganizationsRecord = Organizations & XataRecord;

export type Payments = InferredTypes["payments"];
export type PaymentsRecord = Payments & XataRecord;

export type Folders = InferredTypes["folders"];
export type FoldersRecord = Folders & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Invited = InferredTypes["invited"];
export type InvitedRecord = Invited & XataRecord;

export type DatabaseSchema = {
  contacts: ContactsRecord;
  residents: ResidentsRecord;
  locations: LocationsRecord;
  staff: StaffRecord;
  organizations: OrganizationsRecord;
  payments: PaymentsRecord;
  folders: FoldersRecord;
  users: UsersRecord;
  invited: InvitedRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://alexmruddock-s-workspace-dvjg9p.us-east-1.xata.sh/db/retire-well",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
